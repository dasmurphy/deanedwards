<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
	autoQuote.htc - version 1.0 (pre-release) (2005/01/16)
	Copyright 2005, Dean Edwards
	Web: http://dean.edwards.name/

	This software is licensed under the CC-GNU LGPL
	Web: http://creativecommons.org/licenses/LGPL/2.1/
-->

<!-- a "Quote" button for a WordPress weblog - it generates a blockquote in comments -->

<public:component xmlns:public="urn:HTMLComponent" lightweight="true">
<public:attach event="ondocumentready" handler="createButton"/>
<public:attach event="onmouseover" handler="showButton"/>
<public:attach event="onmouseout" handler="hideButton"/>
<script type="text/javascript">
//<![CDATA[

//# standard WP installation
//# var QUOTE = '<p>Comment by <a href="#%1" rel="bookmark">%2</a>:</p>\n<blockquote cite="#%1">%3</blockquote>\n';

// my installation
var QUOTE = '<blockquote cite="#%1">\n%3\n<address><a href="#%1" rel="bookmark">' +
	'Comment by %2</a></address>\n</blockquote>';

var button;
var _document = window.document;

function createButton() {
	var comment = _document.getElementById("comment");
	if (parentNode.id != "commentlist" || !comment) return;
	// create the <button> element
	button = _document.createElement("BUTTON");
	button.innerText = "Quote";
	button.className = "autoquote"; // for css
	button.onclick = function() {
		var xhtml = QUOTE.replace(/%1/g, id).replace(/%2/g, getAuthor()).replace(/%3/g, getQuotation());
		comment.value += ((comment.value) ? "\n" : "") + xhtml;
		window.location.hash = "postcomment";
	};
	hideButton();
	appendChild(button);
};

function getAuthor() {
	// put your own code here
	// but this should work for a standard WP installation
	var author = "comment #" + id; // default
	var cites = getElementsByTagName("cite");
	if (cites.length) {
		var cite = cites[cites.length - 1];
		author = cite.innerText;
		// tidy the WordPress formatted text
		author = author.replace(/(^\s*comment(\s+by)?\s)|(\s\W\s.*$)/gi, "");
	}
	return author;
};

function showButton() {
	if (button) button.style.visibility = "visible";
	return true;
};

function hideButton() {
	if (button) button.style.visibility = "hidden";
	return true;
};

function getQuotation() {
    var $text = trim(getSelectedText());
    return ($text) ? "<p>" + $text + "</p>" : getInnerHTML();
};

function getInnerHTML() {
	// this should work for a standard WP installation
    //# return innerHTML
    /* this works for my installation */
    var divs = getElementsByTagName("div"), div;
    for (var i = 0; (div = divs[i]); i++) {
        if (/\bcomment-text\b/.test(div.className)) {
            return tidyHTML(div.innerHTML);
        }
    }
};

function tidyHTML($html) {
    // remove syntax highlighting
    $html = $html.replace(/\s+(style|email|urls|tabstop)="[^"]*"/gi, "");
    $html = $html.replace(/<(\/?)span>/gi, "");
    // remove smilies
    $html = $html.replace(/<img[^>]*\s*alt="?([^\s"]+)"?[^>]*>/gi, "$1");
    // html
    $html = $html.replace(/<\/?\w+[\s>]/g, function($match) {
        return $match.toLowerCase();
    });
    $html = $html.replace(/<pre class=([^"\s]+)/gi, "<pre class=\"$1\"");
    $html = $html.replace(/&nbsp;/g, " ");
    return trim($html);
};

function getSelectedText() {
	if (window.getSelection) {
		return String(window.getSelection());
	} else if (_document.selection) {
		return _document.selection.createRange().text;
	}
};

function trim($text) {
    return $text.replace(/^\s+|\s+$/g, "");
};

//]]>
</script>
</public:component>
