<?xml version="1.0"?>
<bindings
  xmlns="http://www.mozilla.org/xbl"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:xbl="http://www.mozilla.org/xbl">

<binding id="datetimepicker" extends="chrome://global/content/bindings/general.xml#basecontrol">
 <content align="center">
  <xul:hbox align="center" xbl:inherits="context">
   <xul:datepicker anonid="datepicker" type="popup" xbl:inherits="disabled,readonly"/>
   <xul:separator />
   <xul:timepicker anonid="timepicker" xbl:inherits="disabled,readonly"/>
  </xul:hbox>
 </content>

 <implementation>
  <property name="datepicker">
   <getter>
    return document.getAnonymousElementByAttribute(this, "anonid", "datepicker");
   </getter>
  </property>
  
  <property name="timepicker">
   <getter>
    return document.getAnonymousElementByAttribute(this, "anonid", "timepicker");
   </getter>
  </property>
  
  <property name="dateValue">
   <getter>
    var date = new Date(this.datepicker.dateValue);
    var time = this.timepicker.dateValue;
    date.setHours(time.getHours());
    date.setMinutes(time.getMinutes());
    date.setSeconds(time.getSeconds());
    date.setMilliseconds(time.getMilliseconds());
    return date;
   </getter>
   <setter>
    this.datepicker.dateValue = new Date(val);
    this.timepicker.dateValue = new Date(val);
    return val;
   </setter>
  </property>
 </implementation>
 <handlers>
  <handler event="input">
    if (event.originalTarget != this) {
      event.stopPropagation();
      event = this.ownerDocument.createEvent("Events");
      event.initEvent("input", true, true);
      this.dispatchEvent(event);
    }
  </handler>

  <handler event="change">
    if (event.originalTarget != this) {
      event.stopPropagation();
      event = this.ownerDocument.createEvent("Events");
      event.initEvent("change", true, true);
      this.dispatchEvent(event);
    }
  </handler>
 </handlers>
 </binding>
</bindings>
